#!/usr/bin/env python3
import os
from pathlib import Path
import subprocess
import shutil
from tempfile import TemporaryDirectory

def _run(command: str, **kwargs):
    # TODO make this print to STDOUT in realtime
    print(f"> {command}")
    p = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, check=True, encoding="utf-8", **kwargs)
    print(p.stdout)
    return p

def update_package_lists():
    print("==================")
    print("Updating packages")
    print("==================")
    _run("apt update")

def install_extra_deps():
    print("=======================")
    print("Installing extra utils")
    print("=======================")
    _run("apt install tree ripgrep parallel -y")

def install_neovim():
    print("=================")
    print("Installing Neovim")
    print("=================")
    # make sure install directory exists
    install_dir = Path(os.environ.get("WF_STATE_DIR", "/usr/local/")) / "neovim"
    install_dir.mkdir(exist_ok=True)

    # install neovim (only if it's not already installed)
    if not Path(install_dir / "bin/nvim").exists():
        # https://github.com/neovim/neovim/wiki/Building-Neovim
        with TemporaryDirectory() as tempdir:
            _run("apt install -y luajit ninja-build gettext libtool-bin cmake g++ pkg-config unzip curl")
            _run(f"git clone https://github.com/neovim/neovim {tempdir}")
            _run(f"make CMAKE_BUILD_TYPE=Release", cwd=tempdir)
            _run(f"make CMAKE_INSTALL_PREFIX={install_dir} install", cwd=tempdir)

    # add nvim to Path
    # TODO change this if ever use a different shell like zsh
    with open(Path.home() / ".bashrc", "a") as f:
        f.write(f'export PATH="$PATH:/opt/wf-state/neovim/bin"\n')

def install_dotfiles():
    print("====================")
    print("Installing dotfiles")
    print("====================")
    _run("git submodule update --init", cwd="/root/dotfiles")

    dotfiles = [".config/nvim"]

    for dotfile in dotfiles:
        dest = Path.home() / dotfile
        if (source := Path.home() / "dotfiles/dotfiles-public/dotfiles" / dotfile).is_dir():
            shutil.copytree(source, dest, dirs_exist_ok=True)
        else:
            shutil.copyfile(source, dest)

def main() -> None:
    update_package_lists()
    install_extra_deps()
    install_neovim()
    install_dotfiles()

if __name__ == "__main__":
    main()
